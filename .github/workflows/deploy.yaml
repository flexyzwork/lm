name: Build & Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .env file for frontend
        run: |
          cat <<EOF > ./apps/client/.env
          NEXT_PUBLIC_API_BASE_URL=${{ secrets.NEXT_PUBLIC_API_BASE_URL }}
          NEXT_PUBLIC_LOCAL_URL=${{ secrets.NEXT_PUBLIC_LOCAL_URL }}
          NEXT_PUBLIC_STRIPE_PUBLIC_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLIC_KEY }}
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to OCI Container Registry (OCIR)
        run: |
          echo "${{ secrets.OCI_AUTH_TOKEN }}" | docker login -u "${{ secrets.OCI_USERNAME }}" --password-stdin kix.ocir.io

      - name: Build & Push Multi-Arch Images
        run: |
          IMAGE_PREFIX="kix.ocir.io/axunckhvyv1v/lm"

          declare -A SERVICES=(
            ["redis"]="redis:6.2-alpine"
            ["backend"]="apps/api"
            ["auth"]="apps/auth"
            ["frontend"]="apps/client"
          )

          for SERVICE in "${!SERVICES[@]}"; do
            CONTEXT_PATH="${SERVICES[$SERVICE]}"
            DOCKERFILE_PATH="$CONTEXT_PATH/Dockerfile"

            if [[ $SERVICE == "redis" ]]; then
              docker pull $CONTEXT_PATH || true
              docker tag $CONTEXT_PATH $IMAGE_PREFIX-$SERVICE:latest
              docker push $IMAGE_PREFIX-$SERVICE:latest
            else
              if [[ $SERVICE == "auth" ]]; then
                CONTEXT_PATH="."

              fi
              docker buildx build \
                --cache-from=type=local,src=/tmp/.buildx-cache \
                --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
                --platform linux/arm64/v8 \
                --push \
                -t $IMAGE_PREFIX-$SERVICE:latest \
                -f $DOCKERFILE_PATH $CONTEXT_PATH
            fi
          done

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config

      - name: Apply K8s Secrets
        env:
          OCI_REGISTRY_AUTH_BASE64: ${{ secrets.OCI_REGISTRY_AUTH_BASE64 }}
          BASE64_ENCODED_REDIS_PASSWORD: ${{ secrets.BASE64_ENCODED_REDIS_PASSWORD }}
        run: |
          envsubst < k8s/secrets.yaml > k8s/secrets-applied.yaml
          kubectl apply -f k8s/secrets-applied.yaml

      - name: Create .env file from GitHub Secrets
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Create Kubernetes Secret
        run: |
          kubectl delete secret app-secrets -n lm-app --ignore-not-found
          kubectl create secret generic app-secrets --from-env-file=.env -n lm-app

      - name: Deploy to OKE
        run: |
          bash k8s/deploy.sh
